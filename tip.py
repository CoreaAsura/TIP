import streamlit as st
import requests
import datetime
import pytz
from math import radians, cos, sin, sqrt, atan2

# üìç ÏÑ§Ï†ïÍ∞í
KST = pytz.timezone('Asia/Seoul')
SEOUL_LAT, SEOUL_LON = 37.5665, 126.9780
TIP_URL = "https://www.space-track.org/basicspacedata/query/TIP"
SATDECAY_URL = "https://www.space-track.org/basicspacedata/query/SATDECAY"

def get_current_kst():
    return datetime.datetime.now(KST).strftime('%Y-%m-%d %H:%M:%S')

def fetch_tip_data(hours):
    assert 24 <= hours <= 168, "ÏãúÍ∞Ñ Î≤îÏúÑÎäî 24~168ÏãúÍ∞Ñ ÏÇ¨Ïù¥Ïó¨Ïïº Ìï©ÎãàÎã§."
    params = {"hours": hours, "format": "json"}
    response = requests.get(TIP_URL, params=params)
    return response.json() if response.ok else []

def fetch_decay_data(days=180):
    params = {"days": days, "format": "json"}
    response = requests.get(SATDECAY_URL, params=params)
    return response.json() if response.ok else []

def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    return R * 2 * atan2(sqrt(a), sqrt(1 - a))

def filter_near_seoul(data, radius_km=3000):
    filtered = []
    for item in data:
        lat = item.get("LATITUDE")
        lon = item.get("LONGITUDE")
        if lat and lon:
            distance = haversine(SEOUL_LAT, SEOUL_LON, float(lat), float(lon))
            if distance <= radius_km:
                filtered.append(item)
    return filtered

# üñ•Ô∏è Streamlit Î†åÎçîÎßÅ ÏãúÏûë
st.set_page_config(page_title="Ïö∞Ï£ºÎÇôÌïòÎ¨ºÏ≤¥ ÌòÑÌô© for MSSB", layout="wide")
st.title("üõ∞Ô∏è Ïö∞Ï£ºÎÇôÌïòÎ¨ºÏ≤¥ ÌòÑÌô© for MSSB")
st.caption(f"ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Å: {get_current_kst()}")

# üéõÔ∏è ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î∞õÍ∏∞
hours = st.sidebar.slider("TIP Î∂ÑÏÑù ÏãúÍ∞Ñ Î≤îÏúÑ (Îã®ÏúÑ: ÏãúÍ∞Ñ)", min_value=24, max_value=168, value=72)
radius = st.sidebar.slider("ÏÑúÏö∏ Í∏∞Ï§Ä Î∞òÍ≤Ω (km)", min_value=500, max_value=5000, value=3000)

# üì° Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
tip_data = fetch_tip_data(hours)
decay_data = fetch_decay_data()
near_seoul = filter_near_seoul(tip_data, radius_km=radius)

# üìç ÏÑúÏö∏ Í∏∞Ï§Ä 3000km Ïù¥ÎÇ¥ Î¨ºÏ≤¥ ÌëúÏãú
st.subheader(f"üéØ ÏÑúÏö∏ Í∏∞Ï§Ä {radius}km Ïù¥ÎÇ¥ ÎÇôÌïòÏòàÏ†ï Î¨ºÏ≤¥")
for item in near_seoul:
    st.markdown(f"""
**üîñ Î™ÖÏπ≠**: {item.get('OBJECT_NAME', 'Ïù¥Î¶ÑÏóÜÏùå')}  
**üõ∞Ô∏è NORAD ID**: {item.get('NORAD_CAT_ID', 'Ïïå Ïàò ÏóÜÏùå')}  
**üìç ÏòàÏÉÅÏ¢åÌëú**: {item.get('LATITUDE', '?')}, {item.get('LONGITUDE', '?')}  
**‚è∞ ÏòàÏÉÅÏãúÍ∞Ñ**: {item.get('IMPACT_DATE', 'ÎØ∏Ï†ï')}  
**üß≠ ÎπÑÌñâÎ∞©Ìñ•**: {item.get('IMPACT_DIRECTION', 'ÎØ∏Ï†ï')}
---
""")

# üåç Ï†Ñ ÏÑ∏Í≥Ñ TIP ÏùºÎ∂Ä ÌëúÏãú
st.subheader("üåç Ï†Ñ ÏÑ∏Í≥Ñ ÎÇôÌïòÏòàÏÉÅ Ïö∞Ï£ºÎ¨ºÏ≤¥ (ÏÉòÌîå)")
world_sample = [
    {
        "Î™ÖÏπ≠": item.get("OBJECT_NAME", "Ïù¥Î¶ÑÏóÜÏùå"),
        "Ï¢åÌëú": f"{item.get('LATITUDE', '?')}, {item.get('LONGITUDE', '?')}"
    }
    for item in tip_data[:5]
]
st.table(world_sample)

# ‚òÑÔ∏è 180Ïùº ÎÇ¥ ÎÇôÌïò Satellite
st.subheader("‚òÑÔ∏è 180Ïùº ÎÇ¥ ÎÇôÌïòÏòàÏ†ï Satellite Î™©Î°ù")
decay_sample = [
    {
        "Î™ÖÏπ≠": item.get("OBJECT_NAME", "Ïù¥Î¶ÑÏóÜÏùå"),
        "ÏòàÏ†ïÏùº": item.get("DECAY_DATE", "ÎØ∏Ï†ï")
    }
    for item in decay_data[:5]
]
st.table(decay_sample)
